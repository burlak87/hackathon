// import { Pool } from 'pg' // ESM-–∏–º–ø–æ—Ä—Ç –¥–ª—è pg
// import 'dotenv/config'

// const pool = new Pool({
// 	host: process.env.DB_HOST || 'localhost',
// 	port: process.env.DB_PORT || 5432,
// 	database: process.env.DB_NAME || 'myapp_db',
// 	user: process.env.DB_USER || 'postgres',
// 	password: process.env.DB_PASSWORD || '',
// 	ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,
// 	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
// 	max: 20, // –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫—É)
// 	idleTimeoutMillis: 30000, // –ó–∞–∫—Ä—ã–≤–∞—Ç—å idle-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30s
// 	connectionTimeoutMillis: 2000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 2s
// 	// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ DATABASE_URL (production) ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ
// 	// connectionString: process.env.DATABASE_URL,
// 	// ssl: { rejectUnauthorized: false },
// 	// ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
// })
// pool.on('error', err => {
// 	console.error('Unexpected error on idle client', err)
// 	process.exit(-1)
// })

// async function testConnection() {
// 	try {
// 		const client = await pool.connect()
// 		console.log('PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ')
// 		client.release()
// 	} catch (err) {
// 		console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.message)
// 		throw err
// 	}
// }

// export { pool, testConnection }

// –ò—Å–ø–æ–ª—å–∑—É–µ–º require –¥–ª—è dotenv ‚Äî –Ω–∞–¥—ë–∂–Ω–µ–µ –≤ ESM
import dotenv from 'dotenv';
dotenv.config();  // –ó–∞–≥—Ä—É–∂–∞–µ—Ç .env –∏–∑ –∫–æ—Ä–Ω—è
import { Pool } from 'pg';
let pool;
// –û—Ç–ª–∞–¥–∫–∞: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ë–î
console.log('=== –û–¢–õ–ê–î–ö–ê ENV ===');
console.log('DB_MOCK value:', process.env.DB_MOCK, '(type:', typeof process.env.DB_MOCK, ')');
console.log('DB_HOST:', process.env.DB_HOST);
console.log('DB_PASSWORD exists?', !!process.env.DB_PASSWORD);  // –ë–µ–∑ –ø–æ–∫–∞–∑–∞ –∑–Ω–∞—á–µ–Ω–∏—è
console.log('====================');
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock (–∑–∞–≥–ª—É—à–∫—É) ‚Äî –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
const useMock = process.env.DB_MOCK?.toLowerCase() === 'true' || process.env.DB_MOCK === '1';
if (useMock) {
	console.log(
		'üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MOCK-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PostgreSQL)'
	)

	// Mock Pool ‚Äî –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ pool (—Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ —Ä–∞–Ω—å—à–µ)
	pool = {
		query: async (queryText, params) => {
			console.log(`[MOCK] –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: ${queryText.substring(0, 100)}...`)

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏)
			if (
				queryText.includes('information_schema.tables') &&
				queryText.includes('news')
			) {
				return { rows: [{ table_exists: true }] } // "–¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" ‚Äî –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—Å—è
			}

			// –ò–º–∏—Ç–∏—Ä—É–µ–º COUNT –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã news
			if (queryText.includes('SELECT COUNT(*)') && queryText.includes('news')) {
				return { rows: [{ count: 0 }] } // –ò–ª–∏ >0 –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
			}

			// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
			if (queryText.includes('CREATE TABLE news')) {
				console.log('[MOCK] –¢–∞–±–ª–∏—Ü–∞ news "—Å–æ–∑–¥–∞–Ω–∞"')
				return { rows: [] }
			}

			// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
			if (queryText.includes('CREATE INDEX') && queryText.includes('news')) {
				console.log('[MOCK] –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è news "—Å–æ–∑–¥–∞–Ω—ã"')
				return { rows: [] }
			}

			// –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ news ‚Äî —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
			if (queryText.includes('news')) {
				return {
					rows: [
						{
							id: 1,
							title: 'Mock News Title',
							summary_text: 'Mock summary',
							url: 'https://mock.com',
							date: new Date(),
							source: 'Mock Source',
							categories: [],
						},
					],
				}
			}

			// Fallback
			return { rows: [] }
		},

		connect: async () => {
			console.log('[MOCK] –ö–ª–∏–µ–Ω—Ç "–ø–æ–¥–∫–ª—é—á–µ–Ω"')
			return {
				query: pool.query.bind(pool),
				release: () => console.log('[MOCK] –ö–ª–∏–µ–Ω—Ç "–æ—Ç–ø—É—â–µ–Ω"'),
			}
		},

		on: (event, handler) => {
			if (event === 'error') {
				console.log('[MOCK] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
			}
		},

		end: async () => {
			console.log('[MOCK] Pool "–∑–∞–∫—Ä—ã—Ç"')
		},
	}
} else {
	console.log('üîå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL')

	pool = new Pool({
		host: process.env.DB_HOST || 'localhost',
		port: process.env.DB_PORT || 5432,
		database: process.env.DB_NAME || 'myapp_db',
		user: process.env.DB_USER || 'postgres',
		password: process.env.DB_PASSWORD || '', // –°—Ç—Ä–æ–∫–∞!
		ssl: process.env.DB_SSL === 'true' ? { rejectUnauthorized: false } : false,
		max: 20,
		idleTimeoutMillis: 30000,
		connectionTimeoutMillis: 2000,
	})

	pool.on('error', err => {
		console.error('Unexpected error on idle client', err)
		process.exit(-1)
	})
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å mock/—Ä–µ–∞–ª—å–Ω—ã–º)
async function testConnection() {
  try {
    const client = await pool.connect();
    console.log('PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (–∏–ª–∏ mock –∞–∫—Ç–∏–≤–µ–Ω)');
    client.release();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.message);
    throw err;
  }
}
// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∞–≤—Ç–æ—Ç–µ—Å—Ç –≤ development (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –º–µ—à–∞–µ—Ç)
if (process.env.NODE_ENV === 'development') {
  testConnection().catch(console.error);
}
export { pool, testConnection };